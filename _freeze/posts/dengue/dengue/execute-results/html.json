{
  "hash": "cd8df42d52899b7ff63f30470d168f11",
  "result": {
    "markdown": "---\ntitle: \"Prediction of dengue cases through climate variables\"\nformat: html\neditor: visual \nauthor: Francisco Requena\ndate: 12/09/2017 \nsidebar: true\nlogo: images/image.jpeg\ncategories:\n  - machine-learning\n---\n\n\nRecently, I discovered a new website about competitions that it is not called Kaggle! Its name is Drivendata.\n\n**DrivenData** offers different competitions related with multiple types of field, such as health (oh yes!), ecology, society... with a common element: to face the world's biggest social challenges.\n\nI decided to join my first competition called *'DengAI: Predicting Disease Spread'*. In this case, the user receives a set of weather information (temperatures, precipitations, vegetations) from two cities: **San Juan** (Puerto Rico) and **Iquitos** (Peru) with total cases of dengue by year and week of every year.\n\n\n![](images/image.jpeg){fig-align='center'}\n\n\nThe goal of the competition is to develop a prediction model that would be able to anticipate the cases of dengue in every city depending on a set of climate variables.\n\nThe DrivenData's blog wrote some days ago, a post about a fast approach with this dataset. It was written in Python. So, I decided to \"translate\" to R language.\n\nThe next code is divided into three main points:\n\n**1.** Code with clean tasks (transform NA values, remove of columns...) and exploratory analyses.\n\n**2.** Function with every step during cleaning of data.\n\n**3.** Development of model, prediction and comparison of predicted vs real total cases detected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load of libraries\nlibrary(tidyverse)\nlibrary(zoo)\nlibrary(corrplot)\nlibrary(MASS)\nlibrary(reshape2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\ntrain_features <- read.csv('data/dengue_features_train.csv')\n  \ntrain_labels <- read.csv('data/dengue_labels_train.csv')\ntest_features <- read.csv('data/dengue_features_test.csv')\nsubmission_format <- read.csv('data/submission_format.csv')\n  \n# Filter of data by city  \nsj_train_labels <- filter(train_labels, city == 'sj')\nsj_train_features <- filter(train_features, city == 'sj')\niq_train_labels <- filter(train_labels, city == 'iq')\niq_train_features <- filter(train_features, city == 'iq')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Is there NA values?\ndf_na_sj <- as.data.frame(apply(sj_train_features,2, function(x) any(is.na(x))))\ncolnames(df_na_sj) <- 'is_there_NA'\ndf_na_sj$number_NA <- apply(sj_train_features,2, function(x) sum(is.na(x)))\ndf_na_sj$mean_NA <- apply(sj_train_features, 2, function(x) mean(is.na(x)))\ndf_na_iq <- as.data.frame(apply(iq_train_features, 2, function(x) any(is.na(x))))\ncolnames(df_na_iq) <- 'is_there_NA'\ndf_na_iq$number_NA <- apply(iq_train_features, 2, function(x) sum(is.na(x)))\ndf_na_iq$mean_NA <- apply(iq_train_features, 2, function(x) mean(is.na(x)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vegetation Index over Time Plot with NAs\nggplot(sj_train_features, aes(x = as.Date(week_start_date), y = ndvi_ne )) +\n  ggtitle('Vegetation Index over Time') +\n  theme_bw() +\n  xlab('Title') +\n  geom_line(na.rm = FALSE, color = 'blue') +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove 'weekofyear' column\nsj_train_features <- dplyr::select(sj_train_features, -week_start_date)\niq_train_features <- dplyr::select(iq_train_features, -week_start_date)\n# Fill the NA values with the previous value\nsj_train_features <- sj_train_features %>%\n            do(na.locf(.))\niq_train_features <- iq_train_features %>%\n            do(na.locf(.))\n# Distribution of labels\n# print(mean(sj_train_labels$total_cases))\n# print(var(sj_train_labels$total_cases))\n# \n# print(mean(iq_train_labels$total_cases))\n# print(var(iq_train_labels$total_cases))\nggplot(sj_train_labels, aes(x = total_cases)) +\n  theme_bw() +\n  ggtitle('Cases of dengue in San Juan') +\n  geom_histogram() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(iq_train_labels, aes(x = total_cases)) +\n  theme_bw() +\n  ggtitle('Cases of dengue in Iquitos') +\n  geom_histogram() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Add total_cases column to *_train_features dataframes\n# sj_train_features <- left_join(sj_train_features, sj_train_labels, by = c('city', 'year', 'weekofyear'))\n sj_train_features$total_cases <- sj_train_labels$total_cases\n# iq_train_features <- left_join(iq_train_features, iq_train_labels, by = c('city', 'year', 'weekofyear'))\niq_train_features$total_cases <- iq_train_labels$total_cases\n# Correlation matrix\nm_sj_train_features <- data.matrix(sj_train_features)\nm_sj_train_features <- cor(x = m_sj_train_features[,3:24], use = 'complete.obs', method = 'pearson')\nm_iq_train_features <- data.matrix(iq_train_features)\nm_iq_train_features <- cor(x = m_iq_train_features[,3:24], use = 'everything', method = 'pearson')\n# Correlation Heatmap\ncorrplot(m_sj_train_features, type = 'full', tl.col = 'black', method=\"shade\")\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n\n```{.r .cell-code}\ncorrplot(m_iq_train_features, type = 'full', tl.col = 'black', method = 'shade')\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-4-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Correlation Bar plot\ndf_sj_train_features <- data.frame(m_sj_train_features)[2:21,] \ndf_sj_train_features <- dplyr::select(df_sj_train_features, total_cases) \n                                    \ndf_iq_train_features <- data.frame(m_iq_train_features)[2:21,]\ndf_iq_train_features <- dplyr::select(df_iq_train_features, total_cases) \nggplot(df_sj_train_features, aes(x= reorder(rownames(df_sj_train_features), -total_cases), y = total_cases)) +\n  geom_bar(stat = 'identity') +\n  theme_bw() +\n  ggtitle('Correlation of variables in San Juan') +\n  ylab('Correlation') +\n  xlab('Variables') +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-4-5.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(df_iq_train_features, aes(x= reorder(rownames(df_sj_train_features), -total_cases), y = total_cases)) +\n  geom_bar(stat = 'identity') +\n  theme_bw() +\n  ggtitle('Correlation of variables in Iquitos') +\n  ylab('Correlation') +\n  xlab('Variables') +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-4-6.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function data cleaning\ndata_clean <- function(df_dengue_features, df_dengue_labels = NULL, add_cases = TRUE) {\n  \n  # Filter by city\n  sj_df_dengue_features <- filter(df_dengue_features, city == 'sj')\n  iq_df_dengue_features <- filter(df_dengue_features, city == 'iq')\n  \n  if (add_cases == TRUE) {\n  sj_df_dengue_labels <- filter(df_dengue_labels, city == 'sj')\n  iq_df_dengue_labels <- filter(df_dengue_labels, city == 'iq')\n  }\n  # Removing week_start_date column\n  sj_df_dengue_features <- dplyr::select(sj_df_dengue_features, -week_start_date)\n  iq_df_dengue_features <- dplyr::select(iq_df_dengue_features, -week_start_date)\n  # Fill of NA values with the previous value\n  sj_df_dengue_features <- sj_df_dengue_features %>%\n    do(na.locf(.))\n  \n  iq_df_dengue_features <- iq_df_dengue_features %>%\n    do(na.locf(.))\n  \n  # Add total_cases to dataframe with features\n  if (add_cases == TRUE) {\n  sj_df_dengue_features$total_cases <- sj_df_dengue_labels$total_cases\n  iq_df_dengue_features$total_cases <- iq_df_dengue_labels$total_cases\n  }\n  \n  # Converting character columns into numbers\n  sj_df_dengue_features <- as.data.frame(apply(sj_df_dengue_features,2,as.numeric))\n  sj_df_dengue_features$city <- rep('sj', nrow(sj_df_dengue_features))\n  iq_df_dengue_features <- as.data.frame(apply(iq_df_dengue_features,2,as.numeric))\n  iq_df_dengue_features$city <- rep('iq', nrow(iq_df_dengue_features))\n  \n  result <- list(sj_df_dengue_features, iq_df_dengue_features )\n  \n  return(result)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Getting data_training clean\ndata_train <- data_clean(train_features, train_labels, TRUE)\n# Getting negative binomials models by city\ntraining_sj <- glm.nb(formula = total_cases ~ reanalysis_specific_humidity_g_per_kg +\n                     reanalysis_dew_point_temp_k +\n                     station_min_temp_c +\n                     station_avg_temp_c, data = data_train[[1]])\ntraining_iq <- glm.nb(formula = total_cases ~ reanalysis_specific_humidity_g_per_kg +\n                        reanalysis_dew_point_temp_k +\n                        station_min_temp_c +\n                        station_avg_temp_c, data = data_train[[2]])\n# Getting data_test clean\ndata_test <- data_clean(test_features, add_cases = FALSE)\n# Testing model with training data\nprediction_train_sj <-  predict(training_sj, data_train[[1]], type = 'response')\nprediction_train_iq <-  predict(training_iq, data_train[[2]], type = 'response')\ndf_prediction_train_sj <- data.frame('prediction' = prediction_train_sj, 'actual' = data_train[[1]]$total_cases,\n                                     'time' = as.Date(train_features$week_start_date[1:936]))\ndf_prediction_train_sj <- melt(df_prediction_train_sj, id.vars = 'time')\nggplot(df_prediction_train_sj, aes(x = time, y = value, color = variable)) +\n  geom_line() +\n  ggtitle('Dengue predicted Cases vs. Actual Cases (City-San Juan) ')\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndf_prediction_train_iq <- data.frame('prediction' = prediction_train_iq, 'actual' = data_train[[2]]$total_cases,\n                                     'time' = as.Date(train_features$week_start_date[937:1456]))\ndf_prediction_train_iq <- melt(df_prediction_train_iq, id.vars = 'time')\nggplot(df_prediction_train_iq, aes(x = time, y = value, color = variable)) +\n  geom_line() +\n  ggtitle('Dengue predicted Cases vs. Actual Cases (City-Iquitos) ')\n```\n\n::: {.cell-output-display}\n![](dengue_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Prediction of total_cases in the data set\nprediction_sj <-  predict(training_sj, data_test[[1]], type = 'response')\nprediction_iq <-  predict(training_iq, data_test[[2]], type = 'response')\n \ndata_prediction_sj <- data.frame('city' = rep('sj', length(prediction_sj) ), \n                                 'total_cases' = prediction_sj, \n                                 'weekofyear' = data_test[[1]]$weekofyear,\n                                 'year' = data_test[[1]]$year )\ndata_prediction_iq <- data.frame('city' = rep('iq', length(prediction_iq) ), \n                                 'total_cases' = prediction_iq,\n                                 'weekofyear' = data_test[[2]]$weekofyear,\n                                 'year' = data_test[[2]]$year)\n  \nsubmission_format$total_cases <- as.numeric(c(data_prediction_sj$total_cases, \n                                                   data_prediction_iq$total_cases))\nsubmission_format$total_cases <- round(submission_format$total_cases, 0)\n  \nwrite.csv(submission_format,\n          file = 'submission_format_submit.csv', row.names = F)\n```\n:::\n",
    "supporting": [
      "dengue_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}